---
title: "PE_Upload"
format: pdf
editor: visual
---

## Preparing data for ProteinExplorer upload

This document will prepare the required files for integrating Spectronaut searches into the ProteinExplorer viewer.

The input needed are the Factory BGS report with genes added and the candidates list.

Files can be read from network drives.

### Required info

-   **fileBGSReport** - Full standard report where genes are part of the export. This file will typically be in the 1-12GB size range. File must be in .tsv format.

-   **fileCandidates** - Export of candidates list from Spectronaut. When exporting

```{r}
fileBGSReport <- "ReportBGS_Test.tsv"
fileCandidates <- "ReportCandidates_Test.tsv"
```

#### Meta data:

The following meta data tags must be typed in below.

|  |  |
|----|----|
| **info_project** |  |
| **Project_tag** |  |
| **Labels** |  |
| **MS_Method** | Method used to generate MS data. "LC-MS proteomics, 24min, Astral, DIA" |
| **Data responsible** | User(s) who generated data or who can be contacted for extra info on data. Multiple responsible can be separated by comma ("MDBL" or "MDBL, MDGR"). |
| **Study responsible**: | User(s) who initiated the study/experiment. Multiple responsible can be separated by comma ("MDBL" or "MDBL, MDGR"). |
| **Data responsible** | User(s) who generated data or who can be contacted for extra info on data. Multiple responsible can be separated by comma ("MDBL" or "MDBL, MDGR"). |
| **Experimental_description** | Short description of experiment. Text will be merged/appended automatically with 'Data responsible', 'Study responsible' and number of proteins in data. |
| **Project** | Official NN 4 digit project number plus project title in format "RP0753_FAM13A" or "0608_LAP1" |
| **Tissue** | Short description of origin. "Cell line", "Cell supernatant", "Plasma", "Liver" |
| **BRENDA** | Tissue ontology taken from <https://www.brenda-enzymes.org/ontology.php>. Format is "BTO:0000131" (blood plasma) |
| **Organism** | in english ("Human", "Mouse") |
| **Taxonomy** | Official UniProt taxonomy number (9606 = Human, 10090 = Mouse, |
|  |  |

```{r}
info_project = "Prepare_for_ProteoExplorer_DummyData"
Project_tag = "TestFilename"
Labels = ""
MS_method = "LCMS proteomics"
Experimental_description = "Prepare_for_ProteoExplorer_DummyData"
Project = "Other_137"
Tissue = "Blood Plasma"
BRENDA = "BTO:0000131"
Organism = "Mouse"
Taxonomy = "10090" #https://www.uniprot.org/taxonomy/10090
```

## Preparing data

### Load helper functions

```{r LoadLibraries}
source("source.R")
source("functions.R")
```

### Load files

Set **RemoveNA** to **TRUE** (default setting) for removal of empty values. Script will count how many were removed during this process and print number. If set to **FALSE** empty values (NA) will be left in data set.

Set **n** to [**Inf**]{.underline} or any digit to read only first n lines. Used to test script without loading massive reports.

```{r LoadReport}
dfBGS <- MDBL_ReadBGSReport(fileBGSReport, n=Inf, RemoveNA = TRUE)
```

```{r LoadCandidates}

dfCandidates <- MDBL_ReadCandidateList(fileCandidates, n=Inf)
```

## Clean data

### Remove non-quantified proteins and peptides

If BGS report was loaded with **RemoveNA = FALSE** data might contain proteins and peptides without quantification. These should be removed prior to next steps.

```{r RemoveNonQuantifiedProteins}
dfBGS <- dfBGS %>% 
  filter(PG.Quantity>0) %>% 
  filter(FG.Quantity>0)
```

### Remove samples

**MDBL_RemoveSamples** can be used to remove files from data set.

```{r}
SamplesToRemove <- c("Sample1", "Sample2")

dfBGS <- dfBGS %>% 
  MDBL_RemoveSamples(SamplesToRemove)
```

### Remove conditions

**MDBL_RemoveConditions** can be used to remove named conditions from data set.

```{r}
ConditionsToRemove <- c("Condition1", "Condition2")

dfBGS <- dfBGS %>% 
  MDBL_RemoveConditions(ConditionsToRemove)
```

### Shorten names

Two functions are can be used for shortening file names.

**MDBL_NameShortening** removes longest identical string from the start of the file names.

**MDBL_NameShortening2** removes all identical substrings separated by "\_" from files.

| R.FileName                | NameShortening     | NameShortening2  |
|---------------------------|--------------------|------------------|
| 20201004_XP1_MDBL_CTR_01  | 4_XP1_MDBL_CTR_01  | 20201004_CTR_01  |
| 20201004_XP1_MDBL_CTR_02  | 4_XP1_MDBL_CTR_02  | 20201004_CTR_02  |
| 20201006_XP1_MDBL_CTR_03  | 6_XP1_MDBL_CTR_03  | 20201006_CTR_03  |
| 20201006_XP1_MDBL_Dose_01 | 6_XP1_MDBL_Dose_01 | 20201006_Dose_01 |

```{r NameShortening2}
dfBGS <- dfBGS %>%
  MDBL_NameShortening2()
```

## Build object

### Prepare proteins

```{r PrepareProteinList}
dfBGS %>% 
  filter(PG.Quantity>0) %>% 
  filter(!is.na(PG.Genes)) %>% 
  distinct(R.FileName, PG.ProteinAccessions, PG.Genes, PG.Quantity) %>% 
  pivot_wider(names_from = R.FileName, values_from = PG.Quantity) %>% 
  rename("Uniprot_Accession" = "PG.ProteinAccessions",
         "gene_symbol" = "PG.Genes") -> proteins
```

### Prepare peptides

```{r PreparePeptidesList}
dfBGS %>% 
  filter(FG.Quantity>0) %>% 
  filter(!is.na(PG.Genes)) %>% 
  distinct(R.FileName, PG.ProteinAccessions, PG.Genes, PEP.StrippedSequence, fg_id, FG.Quantity) %>% 
  mutate(fg_id = str_remove_all(fg_id, "_"),
         fg_id = str_replace_all(fg_id, "\\[Carbamidomethyl \\(C\\)\\]", "\\(UniMod:4\\)"),
         fg_id = str_replace_all(fg_id, "\\[Acetyl \\(Protein N\\-term\\)\\]", "\\(UniMod:1\\)"),
         fg_id = str_replace_all(fg_id, "\\[Oxidation \\(M\\)\\]", "\\(UniMod:35\\)"),
         "PEP_Count" = 1,
         "Panel_7k" = 1) %>% 
  rename("UniprotAccession" = "pg_protein_accessions",
         "Sequence_NoMods" = "pep_stripped_sequence",
         "Sequence_WithMods" = "fg_id",
         "gene_symbol" = "pg_genes") %>% 
  pivot_wider(names_from = r_file_name, values_from = fg_quantity) -> peptides
```

### Merge meta data into one object

```{r MetaMerge}

```

### Merge data and meta data in one object

```{r ObjectMerge}

```

### Save object and description

```{r SaveObject}

```
